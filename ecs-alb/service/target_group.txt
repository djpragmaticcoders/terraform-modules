variable "target_group_name" {default = "app"}
variable "healthy_threshold" {default = "2"}
variable "helth_check_interval" {default = "16"}
variable "deregistration_delay" {default = 2}
variable "unhealthy_threshold" {default = "2"}
variable "listener_port" {default = 80}
variable "protocol" {default = "HTTP"}
variable "listener_action" {default = "forward"}
variable "target_group_protocol" {default = "HTTP"}
variable "alb_listener" {default = ""}
variable "priority" {default = ""}
variable "host_header" {default = ""}


resource "aws_lb_target_group" "service_target" {
  name = "${var.target_group_name}-target-group"
  port = var.service_port
  protocol = var.target_group_protocol
  vpc_id = "${var.vpc_id}"
  target_type = "ip"
  deregistration_delay = var.deregistration_delay
  health_check {
    healthy_threshold = var.healthy_threshold
    port = var.health_check_port
    interval = var.helth_check_interval
    path = var.health_check_path
    timeout = var.health_check_timeout
    unhealthy_threshold = var.unhealthy_threshold
    matcher = "200-399"
  }
}

resource "aws_lb_listener_rule" "service_rule" {
  listener_arn = var.alb_listener
  priority     = var.priority

  action {
    type             = var.listener_action
    target_group_arn = aws_lb_target_group.service_target.arn
  }
    condition {
    host_header {
      values = [var.host_header]
    }
  }
}

output "alb_target_group" {
  value = aws_lb_target_group.service_target.arn
}